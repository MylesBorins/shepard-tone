const voices=[];const STEP_SIZE=.1;const BASE_FREQUENCY=55;const MAX_GAIN=.6;function getPercent(base,val){(val-base)/base}class Voice{#baseFrequency;#stepSize;#fade;constructor(context,frequency=440,fade=0){this.#baseFrequency=frequency;this.#stepSize=STEP_SIZE;this.#fade=fade;this.gain=context.createGain();if(fade===1){this.gain.gain.value=0}else{this.gain.gain.value=MAX_GAIN}this.osc=context.createOscillator();this.osc.type="square";this.osc.frequency.value=frequency;this.osc.connect(this.gain);this.gain.connect(context.destination)}start(){this.osc.start()}step(steps){this.osc.frequency.value+=this.#stepSize*steps;if(this.osc.frequency.value>this.#baseFrequency*2){this.osc.frequency.value=this.#baseFrequency+this.#stepSize*steps}if(this.osc.frequency.value<this.#baseFrequency){this.osc.frequency.value=this.#baseFrequency*2-this.#stepSize*steps}if(this.#fade===1){this.gain.gain.value=(this.osc.frequency.value-this.#baseFrequency)/this.#baseFrequency*MAX_GAIN+.1}if(this.#fade===2){this.gain.gain.value=(1-(this.osc.frequency.value-this.#baseFrequency)/this.#baseFrequency)*MAX_GAIN+.1}}}function createVoices(context){voices.push(new Voice(context,55,1));voices.push(new Voice(context,110,2));voices.push(new Voice(context,220,1));voices.push(new Voice(context,440,2));voices.forEach((voice=>{voice.start()}))}function stepVoices(steps=1){voices.forEach((voice=>{voice.step(steps)}))}function initAudio(){var context=new(window.AudioContext||window.webkitAudioContext);createVoices(context);return context}export{initAudio,stepVoices};